import { API_KEY } from './config.js';

const TTS_API_URL = `https://texttospeech.googleapis.com/v1/text:synthesize?key=${API_KEY}`;

// --- –ö–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
chrome.runtime.onInstalled.addListener(() => {
  chrome.contextMenus.create({ id: "speak-czech-cloud", title: "–ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–ª—É—Ö (ƒåesk√Ω Akcent)", contexts: ["selection"] });
  chrome.contextMenus.create({ id: "add-to-dictionary", title: "üí° –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å", contexts: ["selection"] });
});
chrome.contextMenus.onClicked.addListener((info, tab) => {
  const selection = info.selectionText.trim();
  if (!selection) return;
  if (info.menuItemId === "speak-czech-cloud") { speakText(selection); }
  if (info.menuItemId === "add-to-dictionary") { addWordToDictionary(selection); }
});
async function addWordToDictionary(word) {
    try {
        const translateUrl = `https://api.mymemory.translated.net/get?q=${encodeURIComponent(word)}&langpair=cs|ru`;
        const response = await fetch(translateUrl);
        const data = await response.json();
        if (data && data.responseData) {
            const translation = data.responseData.translatedText;
            const result = await chrome.storage.sync.get({ dictionary: [] });
            const dictionary = result.dictionary;
            if (!dictionary.some(item => item.original === word)) {
                dictionary.push({ original: word, translation: translation });
                await chrome.storage.sync.set({ dictionary: dictionary });
            }
        }
    } catch (error) { console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞:", error); }
}
// --- –ö–æ–¥ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async function speakText(text) {
  const settings = await chrome.storage.sync.get({ voice: 'cs-CZ-Wavenet-A', speed: 1 });
  try {
    const response = await fetch(TTS_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        input: { text: text },
        voice: { languageCode: 'cs-CZ', name: settings.voice },
        audioConfig: { audioEncoding: 'MP3', speakingRate: settings.speed }
      })
    });
    if (!response.ok) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç API Google:', await response.json());
      return;
    }
    const data = await response.json();
    await playAudio(data.audioContent);
  } catch (error) { console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API:', error); }
}
async function playAudio(base64Audio) {
  if (await chrome.offscreen.hasDocument()) {
    await chrome.offscreen.closeDocument(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–ª–µ–µ—Ä –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  }
  await chrome.offscreen.createDocument({
    url: 'offscreen.html',
    reasons: [chrome.offscreen.Reason.AUDIO_PLAYBACK],
    justification: '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ',
  });
  chrome.runtime.sendMessage({ type: 'play', target: 'offscreen', data: base64Audio });
}

// --- –ù–û–í–ê–Ø, –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ö–û–ú–ê–ù–î–´ "–°–¢–û–ü" ---
chrome.runtime.onMessage.addListener(async (message, sender, sendResponse) => {
    if (message.type === 'stop-audio') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–µ—Ä
        if (await chrome.offscreen.hasDocument()) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å - –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
            await chrome.offscreen.closeDocument();
        }
    }
});