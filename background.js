import { API_KEY } from './config.js';

// URL –¥–ª—è API Google TTS
const TTS_API_URL = `https://texttospeech.googleapis.com/v1/text:synthesize?key=${API_KEY}`;

// –ü—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ–∑–¥–∞–µ–º –û–ë–ê –ø—É–Ω–∫—Ç–∞ –≤ –º–µ–Ω—é
chrome.runtime.onInstalled.addListener(() => {
  // –ü—É–Ω–∫—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
  chrome.contextMenus.create({
    id: "speak-czech-cloud",
    title: "–ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–ª—É—Ö (ƒåesk√Ω Akcent)",
    contexts: ["selection"]
  });
  // –ù–û–í–´–ô –ø—É–Ω–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å
  chrome.contextMenus.create({
    id: "add-to-dictionary",
    title: "üí° –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å",
    contexts: ["selection"]
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –º–µ–Ω—é
chrome.contextMenus.onClicked.addListener((info, tab) => {
  const selection = info.selectionText.trim();
  if (!selection) return;

  // –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–ü—Ä–æ—á–∏—Ç–∞—Ç—å"
  if (info.menuItemId === "speak-czech-cloud") {
    speakText(selection);
  }
  // –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å"
  if (info.menuItemId === "add-to-dictionary") {
    addWordToDictionary(selection);
  }
});

// –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞
async function addWordToDictionary(word) {
    try {
        const translateUrl = `https://api.mymemory.translated.net/get?q=${encodeURIComponent(word)}&langpair=cs|ru`;
        const response = await fetch(translateUrl);
        const data = await response.json();

        if (data && data.responseData) {
            const translation = data.responseData.translatedText;
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ–≤–∞—Ä—å –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            const result = await chrome.storage.sync.get({ dictionary: [] });
            const dictionary = result.dictionary;

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ (–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
            if (!dictionary.some(item => item.original === word)) {
                dictionary.push({ original: word, translation: translation });
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
                await chrome.storage.sync.set({ dictionary: dictionary });
            }
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞:", error);
    }
}

// --- –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

async function speakText(text) {
  const settings = await chrome.storage.sync.get({
      voice: 'cs-CZ-Wavenet-A',
      speed: 1
  });

  try {
    const response = await fetch(TTS_API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        input: { text: text },
        voice: { languageCode: 'cs-CZ', name: settings.voice },
        audioConfig: { 
            audioEncoding: 'MP3',
            speakingRate: settings.speed
        }
      })
    });
    if (!response.ok) {
      const error = await response.json();
      console.error('–û—à–∏–±–∫–∞ –æ—Ç API Google:', error);
      return;
    }
    const data = await response.json();
    await playAudio(data.audioContent);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API:', error);
  }
}

async function playAudio(base64Audio) {
  if (await chrome.offscreen.hasDocument()) {
    chrome.runtime.sendMessage({ type: 'play', target: 'offscreen', data: base64Audio });
  } else {
    await chrome.offscreen.createDocument({
      url: 'offscreen.html',
      reasons: [chrome.offscreen.Reason.AUDIO_PLAYBACK],
      justification: '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ Text-to-Speech API',
    });
    chrome.runtime.sendMessage({ type: 'play', target: 'offscreen', data: base64Audio });
  }
}